def abbulabu():
    global ubbalubababa
    ubbalubababa = [
     (0, 0, 0, 0),
     (128, 0, 0, 1),
     (0, 128, 0, 2),
     (128, 128, 0, 3),
     (0, 0, 128, 4),
     (128, 0, 128, 5),
     (0, 128, 128, 6),
     (192, 192, 192, 7),
     (128, 128, 128, 8),
     (255, 0, 0, 9),
     (0, 255, 0, 10),
     (255, 255, 0, 11),
     (0, 0, 255, 12),
     (255, 0, 255, 13),
     (0, 255, 255, 14),
     (255, 255, 255, 15),
     (0, 0, 0, 16),
     (0, 0, 95, 17),
     (0, 0, 135, 18),
     (0, 0, 175, 19),
     (0, 0, 215, 20),
     (0, 0, 255, 21),
     (0, 95, 0, 22),
     (0, 95, 95, 23),
     (0, 95, 135, 24),
     (0, 95, 175, 25),
     (0, 95, 215, 26),
     (0, 95, 255, 27),
     (0, 135, 0, 28),
     (0, 135, 95, 29),
     (0, 135, 135, 30),
     (0, 135, 175, 31),
     (0, 135, 215, 32),
     (0, 135, 255, 33),
     (0, 175, 0, 34),
     (0, 175, 95, 35),
     (0, 175, 135, 36),
     (0, 175, 175, 37),
     (0, 175, 215, 38),
     (0, 175, 255, 39),
     (0, 215, 0, 40),
     (0, 215, 95, 41),
     (0, 215, 135, 42),
     (0, 215, 175, 43),
     (0, 215, 215, 44),
     (0, 215, 255, 45),
     (0, 255, 0, 46),
     (0, 255, 95, 47),
     (0, 255, 135, 48),
     (0, 255, 175, 49),
     (0, 255, 215, 50),
     (0, 255, 255, 51),
     (95, 255, 0, 82),
     (95, 255, 95, 83),
     (95, 255, 135, 84),
     (95, 255, 175, 85),
     (95, 255, 215, 86),
     (95, 255, 255, 87),
     (95, 215, 0, 76),
     (95, 215, 95, 77),
     (95, 215, 135, 78),
     (95, 215, 175, 79),
     (95, 215, 215, 80),
     (95, 215, 255, 81),
     (95, 175, 0, 70),
     (95, 175, 95, 71),
     (95, 175, 135, 72),
     (95, 175, 175, 73),
     (95, 175, 215, 74),
     (95, 175, 255, 75),
     (95, 135, 0, 64),
     (95, 135, 95, 65),
     (95, 135, 135, 66),
     (95, 135, 175, 67),
     (95, 135, 215, 68),
     (95, 135, 255, 69),
     (95, 95, 0, 58),
     (95, 95, 95, 59),
     (95, 95, 135, 60),
     (95, 95, 175, 61),
     (95, 95, 215, 62),
     (95, 95, 255, 63),
     (95, 0, 0, 52),
     (95, 0, 95, 53),
     (95, 0, 135, 54),
     (95, 0, 175, 55),
     (95, 0, 215, 56),
     (95, 0, 255, 57),
     (135, 0, 255, 93),
     (135, 0, 215, 92),
     (135, 0, 175, 91),
     (135, 0, 135, 90),
     (135, 0, 95, 89),
     (135, 0, 0, 88),
     (135, 95, 255, 99),
     (135, 95, 215, 98),
     (135, 95, 175, 97),
     (135, 95, 135, 96),
     (135, 95, 95, 95),
     (135, 95, 0, 94),
     (135, 135, 255, 105),
     (135, 135, 215, 104),
     (135, 135, 175, 103),
     (135, 135, 135, 102),
     (135, 135, 95, 101),
     (135, 135, 0, 100),
     (135, 175, 255, 111),
     (135, 175, 215, 110),
     (135, 175, 175, 109),
     (135, 175, 135, 108),
     (135, 175, 95, 107),
     (135, 175, 0, 106),
     (135, 215, 255, 117),
     (135, 215, 215, 116),
     (135, 215, 175, 115),
     (135, 215, 135, 114),
     (135, 215, 95, 113),
     (135, 215, 0, 112),
     (135, 255, 255, 123),
     (135, 255, 215, 122),
     (135, 255, 175, 121),
     (135, 255, 135, 120),
     (135, 255, 95, 119),
     (135, 255, 0, 118),
     (175, 255, 255, 159),
     (175, 255, 215, 158),
     (175, 255, 175, 157),
     (175, 255, 135, 156),
     (175, 255, 95, 155),
     (175, 255, 0, 154),
     (175, 215, 255, 153),
     (175, 215, 215, 152),
     (175, 215, 175, 151),
     (175, 215, 135, 150),
     (175, 215, 95, 149),
     (175, 215, 0, 148),
     (175, 175, 255, 147),
     (175, 175, 215, 146),
     (175, 175, 175, 145),
     (175, 175, 135, 144),
     (175, 175, 95, 143),
     (175, 175, 0, 142),
     (175, 135, 255, 141),
     (175, 135, 215, 140),
     (175, 135, 175, 139),
     (175, 135, 135, 138),
     (175, 135, 95, 137),
     (175, 135, 0, 136),
     (175, 95, 255, 135),
     (175, 95, 215, 134),
     (175, 95, 175, 133),
     (175, 95, 135, 132),
     (175, 95, 95, 131),
     (175, 95, 0, 130),
     (175, 0, 255, 129),
     (175, 0, 215, 128),
     (175, 0, 175, 127),
     (175, 0, 135, 126),
     (175, 0, 95, 125),
     (175, 0, 0, 124),
     (215, 0, 0, 160),
     (215, 0, 95, 161),
     (215, 0, 135, 162),
     (215, 0, 175, 163),
     (215, 0, 215, 164),
     (215, 0, 255, 165),
     (215, 95, 0, 166),
     (215, 95, 95, 167),
     (215, 95, 135, 168),
     (215, 95, 175, 169),
     (215, 95, 215, 170),
     (215, 95, 255, 171),
     (215, 135, 0, 172),
     (215, 135, 95, 173),
     (215, 135, 135, 174),
     (215, 135, 175, 175),
     (215, 135, 215, 176),
     (215, 135, 255, 177),
     (223, 175, 0, 178),
     (223, 175, 95, 179),
     (223, 175, 135, 180),
     (223, 175, 175, 181),
     (223, 175, 223, 182),
     (223, 175, 255, 183),
     (223, 223, 0, 184),
     (223, 223, 95, 185),
     (223, 223, 135, 186),
     (223, 223, 175, 187),
     (223, 223, 223, 188),
     (223, 223, 255, 189),
     (223, 255, 0, 190),
     (223, 255, 95, 191),
     (223, 255, 135, 192),
     (223, 255, 175, 193),
     (223, 255, 223, 194),
     (223, 255, 255, 195),
     (255, 255, 0, 226),
     (255, 255, 95, 227),
     (255, 255, 135, 228),
     (255, 255, 175, 229),
     (255, 255, 223, 230),
     (255, 255, 255, 231),
     (255, 223, 0, 220),
     (255, 223, 95, 221),
     (255, 223, 135, 222),
     (255, 223, 175, 223),
     (255, 223, 223, 224),
     (255, 223, 255, 225),
     (255, 175, 0, 214),
     (255, 175, 95, 215),
     (255, 175, 135, 216),
     (255, 175, 175, 217),
     (255, 175, 223, 218),
     (255, 175, 255, 219),
     (255, 135, 0, 208),
     (255, 135, 95, 209),
     (255, 135, 135, 210),
     (255, 135, 175, 211),
     (255, 135, 223, 212),
     (255, 135, 255, 213),
     (255, 95, 0, 202),
     (255, 95, 95, 203),
     (255, 95, 135, 204),
     (255, 95, 175, 205),
     (255, 95, 223, 206),
     (255, 95, 255, 207),
     (255, 0, 0, 196),
     (255, 0, 95, 197),
     (255, 0, 135, 198),
     (255, 0, 175, 199),
     (255, 0, 223, 200),
     (255, 0, 255, 201),
     (8, 8, 8, 232),
     (18, 18, 18, 233),
     (28, 28, 28, 234),
     (38, 38, 38, 235),
     (48, 48, 48, 236),
     (58, 58, 58, 237),
     (68, 68, 68, 238),
     (78, 78, 78, 239),
     (88, 88, 88, 240),
     (98, 98, 98, 241),
     (108, 108, 108, 242),
     (118, 118, 118, 243),
     (238, 238, 238, 255),
     (228, 228, 228, 254),
     (218, 218, 218, 253),
     (208, 208, 208, 252),
     (198, 198, 198, 251),
     (188, 188, 188, 250),
     (178, 178, 178, 249),
     (168, 168, 168, 248),
     (158, 158, 158, 247),
     (148, 148, 148, 246),
     (138, 138, 138, 245),
     (128, 128, 128, 244)]


def abalabalab(bob):
    ubab = '6974732d6e6f742d7468652d666c61672d313030252d73757265'
    ulal = binascii.unhexlify(ubab).decode()
    aual = hashlib.md5(ulal.encode()).hexdigest()
    ulul = hashlib.md5(bob.encode()).hexdigest()
    if aual == ulul:
        return ulal
    return '2d313030252d73757265'


def ublublublbublbulbubb():
    global ART_A
    global ART_D
    global ART_E
    global ART_R
    global H
    global SZ
    global W
    global babababa
    global binascii
    global colorsys
    global ctypes
    global fcntl
    global girafix
    global hashlib
    global math
    global os
    global select
    global struct
    global sys
    global termios
    global time
    import time, math, ctypes, os, hashlib, sys, colorsys, binascii
    girafix = ''
    ART_R = [
     '@@@@@___@@@@@',
     '@@@@/\\  \\@@@@',
     '@@@/::\\  \\@@@',
     '@@/:/\\:\\  \\@@',
     '@/::\\~\\:\\  \\@',
     '/:/\\:\\ \\:\\__\\',
     '\\/_|::\\/:/  /',
     '@@@|:|::/  /@',
     '@@@|:|\\/__/@@',
     '@@@|:|  |@@@@',
     '@@@@\\|__|@@@@']
    ART_E = [
     '@@@@@___@@@@@',
     '@@@@/\\  \\@@@@',
     '@@@/::\\  \\@@@',
     '@@/:/\\:\\  \\@@',
     '@/::\\~\\:\\  \\@',
     '/:/\\:\\ \\:\\__\\',
     '\\:\\~\\:\\ \\/__/',
     '@\\:\\ \\:\\__\\@@',
     '@@\\:\\ \\/__/@@',
     '@@@\\:\\__\\@@@@',
     '@@@@\\/__/@@@@']
    babababa = 'you-may-need-this-key-1337'
    ART_D = [
     '@@@@@___@@@@@',
     '@@@@/\\  \\@@@@',
     '@@@/::\\  \\@@@',
     '@@/:/\\:\\  \\@@',
     '@/:/~/\\:\\  \\@',
     '/:/~/  \\:\\__\\',
     '\\:\\~\\  /:/  /',
     '@\\:\\~\\/:/  /@',
     '@@\\:\\/:/  /@@',
     '@@@\\::/  /@@@',
     '@@@@\\/__/@@@@']
    ART_A = [
     '@@@@@___@@@@@',
     '@@@@/\\  \\@@@@',
     '@@@/::\\  \\@@@',
     '@@/:/\\:\\  \\@@',
     '@/::\\~\\:\\  \\@',
     '/:/\\:\\ \\:\\__\\',
     '\\/_/\\:\\/:/  /',
     '@@@@@\\/:/  /@',
     '@@@@@/:/  /@@',
     '@@@@/:/  /@@@',
     '@@@@\\/__/@@@@']
    W = 78
    H = 23
    SZ = W * H
    abbulabu()
    import termios, select, fcntl, struct


def bubbanotlubba(r, g, b):
    best = 0
    best_dist = 196608
    for cr, cg, cb, nr in ubbalubababa:
        dist = (cr - r) ** 2 + (cg - g) ** 2 + (cb - b) ** 2
        if dist < best_dist:
            best = nr
            best_dist = dist
        return best


def alalalalalalaal(fb, x, y, art, rgb):
    if rgb == (0, 0, 0):
        return
    c = bubbanotlubba(*rgb)
    pptr = x + y * W
    for j, line in enumerate(art):
        for i, ch in enumerate(line):
            if ch == '@':
                pass
            else:
                fb[pptr + i] = (
                 ch, c)
        else:
            pptr += W


def buabbuabbuabbua(x, y):
    sys.stdout.write('\x1b[%u;%uH' % (y + 1, x + 1))


def llallllllllll(add, idx, chmode):
    mode = termios.tcgetattr(0)
    if add:
        mode[idx] |= chmode
    else:
        mode[idx] &= ~chmode & 4294967295
    termios.tcsetattr(0, termios.TCSADRAIN, mode)


def llllllallllll(on):
    llallllllllll(on, 3, termios.ICANON)


def lllllllallllll(show):
    llallllllllll(show, 3, termios.ECHO)


def lllllllalllll(show):
    sys.stdout.write([
     '\x1b[?25l',
     '\x1b[?25h'][show])
    sys.stdout.flush()


def areuabubbaoralubba():
    h, w, hp, wp = struct.unpack('HHHH', fcntl.ioctl(0, termios.TIOCGWINSZ, struct.pack('HHHH', 0, 0, 0, 0)))
    return (w, h)


def Bubbaubbalublub():
    dr, dw, de = select.select([sys.stdin], [], [], 0)
    if not dr:
        return
    return sys.stdin.read(1)


def lubalu():
    sys.stdout.write('\x1b[2J')
    sys.stdout.flush()


def lababa(lebula):
    alalalalalalal = [
     73, 13, 19, 88, 88, 2, 77, 26, 95, 85, 11, 23, 114, 2, 93, 54, 71, 67, 90, 8, 77, 26, 0, 3, 93, 68]
    result = ''
    for belu in range(len(alalalalalalal)):
        if lebula[belu] != chr(alalalalalalal[belu] ^ ord(babababa[belu])):
            return 'bbblalaabalaabbblala'
        b2a = ''
        a2b = [122, 86, 75, 75, 92, 90, 77, 24, 24, 24, 25, 106, 76, 91, 84, 80, 77, 25, 77, 81, 92, 25, 92, 87, 77, 80, 75, 92, 25, 74, 77, 75, 80, 87, 94, 25, 88, 74, 25, 95, 85, 88, 94]
        for bbb in a2b:
            b2a += chr(bbb ^ 57)
        else:
            return b2a


def aaaaaaaaa(c):
    sys.stdout.write('\x1b[38;5;%um' % c)


def luaaaaaaaaaaual(h, s, l):
    r, g, b = colorsys.hls_to_rgb(h, l, s)
    return (int(r * 255), int(g * 255), int(b * 255))


def ubbaaalubba():
    global GFX_TEXTPAL
    global flagtext
    lubalu()
    GFX_TEXTPAL = []
    colors = 16
    factor = 1.0 / colors
    for i in range(colors):
        GFX_TEXTPAL.append(luaaaaaaaaaaual(i * factor, 1.0, 0.7))
    else:
        flagtext = [
         32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 32, 87, 101, 108, 99, 111, 109, 101, 32, 116, 111, 32, 68, 97, 114, 107, 67, 79, 78, 32, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 34, 32, 34, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 32, 69, 110, 106, 111, 121, 32, 116, 104, 105, 115, 32, 71, 85, 73, 32, 98, 97, 115, 101, 100, 32, 80, 121, 116, 104, 111, 110, 32, 99, 114, 97, 99, 107, 109, 101, 32, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 34, 32, 71, 85, 73, 32, 98, 97, 115, 101, 100, 32, 111, 110, 32, 71, 121, 110, 118, 97, 101, 108, 32, 67, 111, 108, 100, 119, 105, 110, 100, 39, 115, 32, 115, 99, 114, 105, 112, 116, 32, 34, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 32, 80, 121, 116, 104, 111, 110, 32, 112, 114, 111, 103, 114, 97, 109, 115, 32, 97, 114, 101, 32, 101, 97, 115, 121, 32, 116, 111, 32, 114, 101, 118, 101, 114, 115, 101, 32, 111, 114, 32, 105, 115, 110, 39, 116, 32, 105, 116, 63, 32, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 34, 32, 34, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 32, 67, 111, 108, 111, 117, 114, 102, 117, 108, 32, 116, 101, 120, 116, 32, 105, 115, 32, 99, 111, 111, 108, 32, 116, 111, 32, 115, 101, 101, 32, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 34, 32, 34, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 32, 72, 73, 78, 84, 58, 32, 73, 102, 32, 117, 32, 119, 97, 105, 116, 32, 108, 111, 110, 103, 32, 101, 110, 111, 117, 103, 104, 32, 121, 111, 117, 32, 109, 97, 121, 32, 103, 101, 116, 32, 115, 111, 109, 101, 116, 104, 105, 110, 103, 32, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 34, 32, 32, 34, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 32, 83, 116, 105, 108, 108, 32, 119, 97, 105, 116, 105, 110, 103, 63, 63, 32, 85, 32, 104, 97, 118, 101, 32, 112, 97, 116, 105, 101, 110, 99, 101, 32, 98, 117, 116, 32, 105, 115, 32, 105, 116, 32, 119, 111, 114, 116, 104, 32, 105, 116, 63, 32, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 34, 32, 32, 34, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 32, 83, 116, 105, 108, 108, 32, 119, 97, 105, 116, 105, 110, 103, 63, 63, 32, 85, 32, 104, 97, 118, 101, 32, 112, 97, 116, 105, 101, 110, 99, 101, 32, 98, 117, 116, 32, 105, 115, 32, 105, 116, 32, 119, 111, 114, 116, 104, 32, 105, 116, 63, 32, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 34, 32, 32, 34, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 32, 83, 116, 105, 108, 108, 32, 119, 97, 105, 116, 105, 110, 103, 63, 63, 32, 85, 32, 104, 97, 118, 101, 32, 112, 97, 116, 105, 101, 110, 99, 101, 32, 98, 117, 116, 32, 105, 115, 32, 105, 116, 32, 119, 111, 114, 116, 104, 32, 105, 116, 63, 32, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 34, 32, 32, 34, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 32, 83, 116, 105, 108, 108, 32, 119, 97, 105, 116, 105, 110, 103, 63, 63, 32, 85, 32, 104, 97, 118, 101, 32, 112, 97, 116, 105, 101, 110, 99, 101, 32, 98, 117, 116, 32, 105, 115, 32, 105, 116, 32, 119, 111, 114, 116, 104, 32, 105, 116, 63, 32, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 34, 32, 32, 34, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 32, 83, 116, 105, 108, 108, 32, 119, 97, 105, 116, 105, 110, 103, 63, 63, 32, 85, 32, 104, 97, 118, 101, 32, 112, 97, 116, 105, 101, 110, 99, 101, 32, 98, 117, 116, 32, 105, 115, 32, 105, 116, 32, 119, 111, 114, 116, 104, 32, 105, 116, 63, 32, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 34, 32, 32, 34, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 32, 83, 116, 105, 108, 108, 32, 119, 97, 105, 116, 105, 110, 103, 63, 63, 32, 85, 32, 104, 97, 118, 101, 32, 112, 97, 116, 105, 101, 110, 99, 101, 32, 98, 117, 116, 32, 105, 115, 32, 105, 116, 32, 119, 111, 114, 116, 104, 32, 105, 116, 63, 32, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 34, 32, 32, 34, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 32, 83, 116, 105, 108, 108, 32, 119, 97, 105, 116, 105, 110, 103, 63, 63, 32, 85, 32, 104, 97, 118, 101, 32, 112, 97, 116, 105, 101, 110, 99, 101, 32, 98, 117, 116, 32, 105, 115, 32, 105, 116, 32, 119, 111, 114, 116, 104, 32, 105, 116, 63, 32, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 34, 32, 32, 34, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 32, 83, 116, 105, 108, 108, 32, 119, 97, 105, 116, 105, 110, 103, 63, 63, 32, 85, 32, 104, 97, 118, 101, 32, 112, 97, 116, 105, 101, 110, 99, 101, 32, 98, 117, 116, 32, 105, 115, 32, 105, 116, 32, 119, 111, 114, 116, 104, 32, 105, 116, 63, 32, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 34, 32, 32, 34, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 32, 83, 116, 105, 108, 108, 32, 119, 97, 105, 116, 105, 110, 103, 63, 63, 32, 85, 32, 104, 97, 118, 101, 32, 112, 97, 116, 105, 101, 110, 99, 101, 32, 98, 117, 116, 32, 105, 115, 32, 105, 116, 32, 119, 111, 114, 116, 104, 32, 105, 116, 63, 32, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 34, 32, 32, 34, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 32, 83, 116, 105, 108, 108, 32, 119, 97, 105, 116, 105, 110, 103, 63, 63, 32, 85, 32, 104, 97, 118, 101, 32, 112, 97, 116, 105, 101, 110, 99, 101, 32, 98, 117, 116, 32, 105, 115, 32, 105, 116, 32, 119, 111, 114, 116, 104, 32, 105, 116, 63, 32, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 34, 32, 32, 34, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 32, 72, 97, 118, 101, 32, 121, 111, 117, 32, 116, 104, 111, 117, 103, 104, 116, 32, 97, 98, 111, 117, 116, 32, 114, 101, 97, 100, 105, 110, 103, 32, 116, 104, 105, 115, 63, 32, 82, 101, 115, 116, 97, 114, 116, 105, 110, 103, 32, 105, 110, 32, 51, 46, 46, 46, 32, 50, 46, 46, 46, 32, 49, 46, 46, 46, 32, 60, 95, 45, 39, 45, 95, 126, 42, 94, 42, 126, 95, 45, 39, 45, 95, 62, 34, 32]


def bal(fb, x, y, txt, rgb):
    if rgb == (0, 0, 0):
        return
    c = bubbanotlubba(*rgb)
    for i, ch in enumerate(txt):
        fb[x + i + y * W] = (
         ch, c)


def lualuabba(ftime):
    fb = [(' ', 1)] * SZ
    ftime14 = 0.125 * ftime
    rgb = [
     luaaaaaaaaaaual((ftime14 + 0.0) % 1.0, 1.0, 0.5),
     luaaaaaaaaaaual((ftime14 + 0.05) % 1.0, 1.0, 0.5),
     luaaaaaaaaaaual((ftime14 + 0.1) % 1.0, 1.0, 0.5),
     luaaaaaaaaaaual((ftime14 + 0.15) % 1.0, 1.0, 0.5)]
    center = 35
    amp = 7
    tamp = 1.2
    offset = amp + math.sin(ftime * tamp) * amp
    alalalalalalaal(fb, int(3 + center + offset * 1.5), 1, ART_D, rgb[0])
    alalalalalalaal(fb, int(0 + center + offset * 0.5), 1, ART_A, rgb[1])
    alalalalalalaal(fb, int(-2 + center - offset * 0.5), 1, ART_E, rgb[2])
    alalalalalalaal(fb, int(-5 + center - offset * 1.5), 1, ART_R, rgb[3])
    input_x = 30
    input_y = 16
    bal(fb, 22, 16, 'darkCON{', rgb[0])
    bal(fb, 56, 16, '}', rgb[0])
    cur_x = input_x + len(girafix)
    cur_y = input_y
    if len(girafix) < 26:
        cur_rgb1 = (
         0, int(math.sin(ftime * 5.0) * 64 + 191), 0)
        cur_rgb2 = (0, int(math.sin(ftime * 5.0 + 1.0) * 64 + 191), 0)
        bal(fb, cur_x - 1, cur_y - 1, '↘', cur_rgb1)
        bal(fb, cur_x + 1, cur_y + 1, '↖', cur_rgb1)
        bal(fb, cur_x - 1, cur_y + 1, '↗', cur_rgb1)
        bal(fb, cur_x + 1, cur_y - 1, '↙', cur_rgb1)
    input_rgb = rgb[0]
    bal(fb, input_x, input_y, girafix, input_rgb)
    if len(girafix) == 26:
        laba = lababa(girafix)
        if len(laba) > 20:
            bal(fb, 18, 17, laba, rgb[0])
    txt_start = int(ftime * 6) % len(flagtext)
    txt_end = txt_start + 60
    if len(girafix) == 27:
        laba = abalabalab(girafix)
        if len(laba) > 20:
            bal(fb, 18, 17, laba, rgb[0])
    txtable = ''
    c = 0
    for i in flagtext:
        txtable += chr(i ^ c % 1337)
    else:
        txt = txtable[txt_start:txt_end]
        for i, ch in enumerate(txt):
            txt_i = txt_start + i
            bal(fb, 10 + i, 20, ch, GFX_TEXTPAL[(txt_i % len(GFX_TEXTPAL))])
        else:
            bal(fb, 10, 19, '┌>', rgb[1])
            bal(fb, 10, 20, '|', rgb[0])
            bal(fb, 10, 21, '└>', rgb[1])
            bal(fb, 69, 19, '<┐', rgb[1])
            bal(fb, 70, 20, '|', rgb[0])
            bal(fb, 69, 21, '<┘', rgb[1])
            buabbuabbuabbua(0, 0)
            cx, cy = areuabubbaoralubba()
            ox = (cx - W) / 2
            oy = (cy - H) / 2
            last_color = -1
            for y in range(H):
                buf = []
                buabbuabbuabbua(ox, oy + y)
                for ch, c in fb[y * W:(y + 1) * W]:
                    if c != last_color:
                        sys.stdout.write(''.join(buf))
                        buf = []
                        aaaaaaaaa(c)
                        last_color = c
                    buf.append(ch)
                else:
                    print(''.join(buf))


def bigbubbbua():
    global girafix
    ublublublbublbulbubb()
    ftime_base = time.time()
    try:
        ubbaaalubba()
        lllllllalllll(show=False)
        llllllallllll(on=False)
        lllllllallllll(show=False)
        while True:
            ch = Bubbaubbalublub()
            if ch is not None:
                o = ord(ch)
                if 32 <= o <= 126:
                    if len(girafix) < 26:
                        girafix += ch
                    else:
                        if o in (8, 127):
                            girafix = girafix[:-1]
            ftime = time.time() - ftime_base
            lualuabba(ftime)
            time.sleep(0.01)

    except KeyboardInterrupt:
        lllllllallllll(show=True)
        llllllallllll(on=True)
        lllllllalllll(show=True)


if __name__ == '__main__':
    bigbubbbua()
